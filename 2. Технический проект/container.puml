@startuml Диаграмма контейнеров
title "C4_Контейнеры. Система учета энергопотребления"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(homeowner, "Домовладелец", "Мониторинг и анализ потребления электроэнергии")
Person(industrialFacilityAministrator, "Администраторы промышленных объектов", "Формирование отчетов о потреблении, оптимизация производственных процессов")
Person(electricCompany, "Электрокомпания", "Анализ данных о потреблении, формирование тарифов, планирование мощностей")
Person(technicalStaff, "Технический персонал", "Учет и обслуживание оборудования для мониторинга, решение технических проблем")

System_Boundary(appBoundary, "Система учета энергопотребления") {
    Container(webApp, "Веб-приложение", "React", "Интерфейс для пользователей системы учета энергопотребления")
    Container(apiGateway, "API Gateway", "", "Маршрутизация API запросов")

    Container(authenticationService, "Сервис аутентификации", "Java", "Управляет аутентификацией и авторизацией")
    ContainerDb(authDB, "База данных пользователей", "PostgreSQL")

    Container(energyDataCollector, "Сервис для сбора и обработки данных с IoT-устройств", "Java")
    ContainerDb(energyDataCollectorDB, "База данных показателей с IoT-устройств", "PostgreSQL")

    Container(reportService, "Сервис для формирования отчетов", "Java")
    ContainerDb(reportDB, "База данных отчетов о потреблении", "PostgreSQL")

    Container(govPortalIntegrationService, "Сервис интеграции с ЕПГУ", "Java")

    Container(notificationService, "Сервис уведомлений", "", "Отправка уведомлений пользователям")

    Container(messageBroker, "Событийная шина", "RabbitMQ", "Маршрутизация сообщений между сервисами")
}

System_Ext(ioTDevices, "IoT-устройства", "Получение актуальных показаний счетчиков")
System_Ext(govAPI, "Единый портал госуслуг (ЕПГУ)", "API Госуслуг")
System_Ext(notificationServiceExt, "Email сервис", "Уведомление пользвателей о статусе заявок или превышении лимита")

homeowner --> webApp : "Мониторинг энергопотребления\n[HTTPS]"
industrialFacilityAministrator --> webApp : "Мониторинг энергопотребления\n[HTTPS]"
electricCompany --> webApp : "Мониторинг энергопотребления\n[HTTPS]"
technicalStaff --> webApp : "Мониторинг энергопотребления\n[HTTPS]"

webApp --> apiGateway : "API вызовы\n[HTTPS/REST]"

apiGateway --> authenticationService : "API вызовы\n[HTTPS/REST]"
apiGateway --> govPortalIntegrationService : "API вызовы\n[HTTPS/REST]"
authenticationService -right-> govPortalIntegrationService : "API вызовы\n[HTTPS/REST]"

apiGateway --> reportService : "API вызовы\n[HTTPS/REST]"
apiGateway --> energyDataCollector : "API вызовы\n[HTTPS/REST]"
reportService -right-> energyDataCollector : "API вызовы\n[HTTPS/REST]"

apiGateway --> notificationService : "API вызовы\n[HTTPS/REST]"

authenticationService --> authDB : "Чтение/Запись\n[SQL/TCP]"
energyDataCollector --> energyDataCollectorDB : "Чтение/Запись\n[SQL/TCP]"
reportService --> reportDB : "Чтение/Запись\n[SQL/TCP]"

govPortalIntegrationService -left-> govAPI : "Получение данных пользователей\n[HTTPS/REST]"
energyDataCollector --down--> ioTDevices : "Сбор данных с устройств\n[MQTT/HTTP]"
notificationService -right-> notificationServiceExt : "Отправка уведомлений\n[HTTPS/REST]"

authenticationService ----> messageBroker : "Pub/sub\n[AMQP]"
govPortalIntegrationService ----> messageBroker : "Pub/sub\n[AMQP]"
reportService ----> messageBroker : "Pub/sub\n[AMQP]"
energyDataCollector ----> messageBroker : "Pub/sub\n[AMQP]"
notificationService ----> messageBroker : "Pub/sub\n[AMQP]"

SHOW_FLOATING_LEGEND()

@enduml